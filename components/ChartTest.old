import React, { useEffect, useRef, useState } from 'react';
import {
    StyleSheet, View, SafeAreaView, Dimensions, Animated, TextInput,
} from 'react-native';
import { Svg, Defs, LinearGradient, Stop, Path } from 'react-native-svg';
import * as path from 'svg-path-properties';
import * as shape from 'd3-shape';

import {
    scaleTime,
    scaleLinear,
    scaleQuantile,
} from 'd3-scale';

const d3 = {
    shape,
};

const height = 200;
let { width } = Dimensions.get('screen');
width = width - 40
const verticalPadding = 5;
const cursorRadius = 10;
const labelWidth = 100;

const data = [
    { x: new Date(2018, 9, 1), y: 0 },
    { x: new Date(2018, 9, 16), y: 0 },
    { x: new Date(2018, 9, 17), y: 200 },
    { x: new Date(2018, 10, 1), y: 200 },
    { x: new Date(2018, 10, 2), y: 300 },
    { x: new Date(2018, 10, 5), y: 300 },
];

const scaleX = scaleTime().domain([new Date(2018, 9, 1), new Date(2018, 10, 5)]).range([0, width]);
const scaleY = scaleLinear().domain([0, 300]).range([height - verticalPadding, verticalPadding]);
const scaleLabel = scaleQuantile().domain([0, 300]).range([0, 200, 300]);

const line = d3.shape.line()
    .x(d => scaleX(d.x))
    .y(d => scaleY(d.y))
    .curve(d3.shape.curveBasis)(data);
const properties = path.svgPathProperties(line);
const lineLength = properties.getTotalLength();


const ChartTest = props => {
    const [x, setX] = useState(new Animated.Value(0))
    const cursor = useRef(null)
    const label = useRef(null)

    const moveCursor = (value) => {
        const { x, y } = properties.getPointAtLength(lineLength - value);
        cursor.current?.setNativeProps({ top: y - cursorRadius, left: x - cursorRadius });
        console.log(cursor)
        const _label = scaleLabel(scaleY.invert(y));
        label.current?.setNativeProps({ text: `${_label} USD` });
    }

    useEffect(
        () => {
            x.addListener(({ value }) => moveCursor(value));
            moveCursor(0);
        }, []
    )

    const translateX = x.interpolate({
        inputRange: [0, lineLength],
        outputRange: [width - labelWidth, 0],
        extrapolate: 'clamp',
    })
    console.log(width)
    return (
        <View style={styles.container}>
            <Svg {...{ width, height }}>
                <Defs>
                    <LinearGradient x1="50%" y1="0%" x2="50%" y2="100%" id="gradient">
                        <Stop stopColor="#CDE3F8" offset="0%" />
                        <Stop stopColor="#eef6fd" offset="80%" />
                        <Stop stopColor="#FEFFFF" offset="100%" />
                    </LinearGradient>
                </Defs>
                <Path d={line} fill="transparent" stroke="#367be2" strokeWidth={5} />
                <Path d={`${line} L ${width} ${height} L 0 ${height}`} fill="url(#gradient)" />
                <View ref={cursor} style={styles.cursor} />
            </Svg>
            <Animated.View style={[styles.label, { transform: [{ translateX }] }]}>
                <TextInput ref={label} />
            </Animated.View>
            <Animated.ScrollView
                style={StyleSheet.absoluteFill}
                contentContainerStyle={{ width: lineLength * 2 }}
                showsHorizontalScrollIndicator={false}
                scrollEventThrottle={16}
                bounces={false}
                onScroll={Animated.event(
                    [
                        {
                            nativeEvent: {
                                contentOffset: { x },
                            },
                        },
                    ],
                    { useNativeDriver: true },
                )}
                horizontal
            />
        </View>
    )
}

const styles = StyleSheet.create({
    root: {
        flex: 1,
    },
    container: {
        marginTop: 60,
        height,
        width: '100%',
    },
    cursor: {
        width: cursorRadius * 2,
        height: cursorRadius * 2,
        borderRadius: cursorRadius,
        /* borderColor: '#367be2', */
        borderColor: 'black',
        borderWidth: 3,
        backgroundColor: 'white',
        position: 'absolute',
    },
    label: {
        position: 'absolute',
        top: -45,
        left: 0,
        backgroundColor: 'lightgray',
        width: labelWidth,
    },
});

export default ChartTest